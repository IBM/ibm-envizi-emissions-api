{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calculating the Environmental Impact of Power Plants"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Table of contents**\n",
    "- Overview\n",
    "- Setup\n",
    "  - Authentication Token\n",
    "- Use Case\n",
    "  - Coal-Fired Power Plant Type\n",
    "  - Natural Gas-Fired Power Plant Type\n",
    "  - Oil-Fired Power Plant Type\n",
    "  - Biomass-Fired Power Plant Type\n",
    "  - Comparison of Emissions Between Power Plant Types\n",
    "- Related Links"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **IBM Envizi - Emissions API, Stationary Emissions API** is used in this sample application.\n",
    "\n",
    "This notebook illustrates how to calculate greenhouse gas emissions for different types of power plants. In the energy sector, emissions can vary significantly depending on the type of fuel used and the energy content that is associated with that fuel. The API allows us to calculate emissions based on the fuel type and fuel consumption amount.\n",
    "\n",
    "The primary focus of this notebook is calculating emissions for different fuel types such as coal, oil, natural gas, and biomass, based on a given energy consumption using the **Stationary Emissions API**.\n",
    "\n",
    "Read this example to learn how to complete the following tasks:\n",
    "- Input specific fuel data and energy content for various fuels.\n",
    "- Retrieve and analyze emissions data based on the given energy content.\n",
    "- Understand the impact of different fuels on overall GHG emissions in the power sector.\n",
    "\n",
    "**Business value**\n",
    "\n",
    "By leveraging these calculations, organizations can make data-driven decisions about fuel choices and their corresponding environmental impact, contributing to more sustainable energy generation.\n",
    "\n",
    "**Use Case**\n",
    "\n",
    "In this notebook, an example of Calculating the environmental impact of power plants will be used to identify oppurtunities for carbon reduction through efficiency improvemnets or cleaner fuel alternatives.\n",
    "\n",
    "For more information on the Emissions API Stationary Endpoint inputs and the output data points, see [Emissions API Developer Guide]().\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Alt text](power_plant.png \"Power Plant\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ensure that Python 3+ is installed on your system.\n",
    "\n",
    "\n",
    "<b>Note:</b> To run this notebook, you must first add your credentials to `'../../../../auth/secrets.ini'` in the following format:\n",
    "\n",
    "```\n",
    "[EAPI]\n",
    "api.api_key = <Your Emissions API Key>\n",
    "api.tenant_id = <Your Emissions API Tenant Id>\n",
    "api.org_id = <Your Emissions API Org Id>\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install the prerequisite Python packages\n",
    "%pip install pandas configparser IPython requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import configparser\n",
    "import requests\n",
    "import json\n",
    "from IPython.display import display as display_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authorization Token"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the following code snippet to generate a Bearer Token by using your api_key configured in secrets.ini."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Authentication Success\n"
     ]
    }
   ],
   "source": [
    "config = configparser.RawConfigParser()\n",
    "config.read(['../../../../auth/secrets.ini','../../../../auth/config.ini'])\n",
    "\n",
    "EAPI_API_KEY        = config.get('EAPI', 'api.api_key')\n",
    "EAPI_TENANT_ID      = config.get('EAPI', 'api.tenant_id')\n",
    "EAPI_CLIENT_ID      = 'ghgemissions-' + EAPI_TENANT_ID\n",
    "EAPI_ORG_ID         = config.get('EAPI', 'api.org_id')\n",
    "\n",
    "EAPI_AUTH_CLIENT_ID = 'saascore-' + EAPI_TENANT_ID\n",
    "EAPI_AUTH_ENDPOINT  = config.get('EAPI', 'api.auth_endpoint')\n",
    "\n",
    "EAPI_BASE_URL       = config.get('EAPI', 'api.base_url')\n",
    "EAPI_ENDPOINT       = f\"{EAPI_BASE_URL}/stationary\"\n",
    "\n",
    "auth_request_headers: dict = {}\n",
    "auth_request_headers[\"X-IBM-CLIENT-ID\"] = EAPI_AUTH_CLIENT_ID\n",
    "auth_request_headers[\"X-API-KEY\"] = EAPI_API_KEY\n",
    "\n",
    "verify = True\n",
    "\n",
    "auth_url = f\"{EAPI_AUTH_ENDPOINT}?orgId={EAPI_ORG_ID}\"\n",
    "              \n",
    "response = requests.get(url = auth_url,\n",
    "                        headers = auth_request_headers,\n",
    "                        verify  = verify\n",
    "                       )\n",
    "if response.status_code == 200:\n",
    "    jwt_token = response.text\n",
    "    print(\"Authentication Success\")\n",
    "else:     \n",
    "    print(\"Authentication Failed\")\n",
    "    print(response.text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use Case"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Coal-Fired Power Plant Type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can measure the impact of a coal-fired power plant on the environment. In this example, the coal-fired power plant uses the lignite as fuel and the energy content is 5 GigaJoules (GJ). The output is the measurement of all the Greenhouse Gas Emissions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "fuel_type = \"Coal - Lignite\"\n",
    "energy_value = 5\n",
    "energy_unit = \"GJ\"  #Giga Joule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requests payload is : {\n",
      "  \"activity\": {\n",
      "    \"type\": \"Coal - Lignite\",\n",
      "    \"value\": 5,\n",
      "    \"unit\": \"GJ\"\n",
      "  },\n",
      "  \"location\": {\n",
      "    \"country\": \"USA\",\n",
      "    \"stateProvince\": \"New York\"\n",
      "  },\n",
      "  \"time\": {\n",
      "    \"date\": \"2025-01-01\"\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "lignite_payload = {\n",
    "  \"activity\": {\n",
    "    \"type\": fuel_type,\n",
    "    \"value\": energy_value,\n",
    "    \"unit\": energy_unit\n",
    "  },\n",
    "  \"location\": {\n",
    "    \"country\": \"USA\",\n",
    "    \"stateProvince\": \"New York\"\n",
    "  },\n",
    "  \"time\": {\n",
    "    \"date\": \"2025-01-01\"\n",
    "  }\n",
    "}\n",
    "       \n",
    "print(\"Requests payload is :\", json.dumps(lignite_payload, indent=2))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the query headers\n",
    "request_headers: dict = {}\n",
    "request_headers[\"Content-Type\"] = \"application/json\"\n",
    "request_headers[\"x-ibm-client-id\"] = EAPI_CLIENT_ID\n",
    "request_headers[\"Authorization\"] = \"Bearer \" + jwt_token"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Submit the request\n",
    "lignite_response = requests.post(EAPI_ENDPOINT, \n",
    "                                 headers = request_headers, \n",
    "                                 data = json.dumps(lignite_payload))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transactionId</th>\n",
       "      <th>totalCO2e</th>\n",
       "      <th>CO2</th>\n",
       "      <th>CH4</th>\n",
       "      <th>N2O</th>\n",
       "      <th>unit</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77a08ab4-b506-443c-a72f-755a9a6cf41e</td>\n",
       "      <td>466.572457</td>\n",
       "      <td>463.103446</td>\n",
       "      <td>1.459638</td>\n",
       "      <td>2.009372</td>\n",
       "      <td>kgCO2e</td>\n",
       "      <td>The coal - lignite emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          transactionId   totalCO2e         CO2       CH4  \\\n",
       "0  77a08ab4-b506-443c-a72f-755a9a6cf41e  466.572457  463.103446  1.459638   \n",
       "\n",
       "        N2O    unit  \\\n",
       "0  2.009372  kgCO2e   \n",
       "\n",
       "                                                                                                                                   description  \n",
       "0  The coal - lignite emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if lignite_response.text != \"\":\n",
    "    # Get the response as json\n",
    "    response_json = lignite_response.json()\n",
    "    \n",
    "    # Get json and convert to dataframe\n",
    "    json_str = json.dumps(response_json)\n",
    "    dict = json.loads(json_str)\n",
    "    dataframe = pd.json_normalize(dict) \n",
    "    \n",
    "    # display\n",
    "    print(\"\\n\\n\")\n",
    "    pd.set_option('display.max_colwidth', None)\n",
    "    display( dataframe) \n",
    "else:\n",
    "    print(\"Empty Response\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Natural Gas-Fired Power Plant Type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can measure the impact of a natural gas-fired power plant on the environment. In this example, the natural gas-fired power plant uses natural gas as fuel and the energy content is 5 GigaJoules. The output is the measurement of all the Greenhouse Gas Emissions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "fuel_type = \"Natural Gas\"\n",
    "energy_content = \"5\" \n",
    "energy_unit = \"GJ\"  #Giga Joule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requests payload is : {\n",
      "  \"activity\": {\n",
      "    \"type\": \"Natural Gas\",\n",
      "    \"value\": 5,\n",
      "    \"unit\": \"GJ\"\n",
      "  },\n",
      "  \"location\": {\n",
      "    \"country\": \"USA\",\n",
      "    \"stateProvince\": \"New York\"\n",
      "  },\n",
      "  \"time\": {\n",
      "    \"date\": \"2025-01-01\"\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "natural_gas_payload = {\n",
    "  \"activity\": {\n",
    "    \"type\": fuel_type,\n",
    "    \"value\": energy_value,\n",
    "    \"unit\": energy_unit\n",
    "  },\n",
    "  \"location\": {\n",
    "    \"country\": \"USA\",\n",
    "    \"stateProvince\": \"New York\"\n",
    "  },\n",
    "  \"time\": {\n",
    "    \"date\": \"2025-01-01\"\n",
    "  }\n",
    "}\n",
    "       \n",
    "print(\"Requests payload is :\", json.dumps(natural_gas_payload, indent=2)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Submit the request\n",
    "natural_gas_response = requests.post(EAPI_ENDPOINT, \n",
    "                                     headers = request_headers, \n",
    "                                     data = json.dumps(natural_gas_payload))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transactionId</th>\n",
       "      <th>totalCO2e</th>\n",
       "      <th>CO2</th>\n",
       "      <th>CH4</th>\n",
       "      <th>N2O</th>\n",
       "      <th>unit</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>f3ef793d-1a7f-48ad-9f98-23de35bae7a2</td>\n",
       "      <td>251.714163</td>\n",
       "      <td>251.455883</td>\n",
       "      <td>0.132694</td>\n",
       "      <td>0.125586</td>\n",
       "      <td>kgCO2e</td>\n",
       "      <td>The natural gas emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          transactionId   totalCO2e         CO2       CH4  \\\n",
       "0  f3ef793d-1a7f-48ad-9f98-23de35bae7a2  251.714163  251.455883  0.132694   \n",
       "\n",
       "        N2O    unit  \\\n",
       "0  0.125586  kgCO2e   \n",
       "\n",
       "                                                                                                                                description  \n",
       "0  The natural gas emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if natural_gas_response.text != \"\":\n",
    "    # Get the response as json\n",
    "    response_json = natural_gas_response.json()\n",
    "    \n",
    "    # Get json and convert to dataframe\n",
    "    json_str = json.dumps(response_json)\n",
    "    dict = json.loads(json_str)\n",
    "    dataframe = pd.json_normalize(dict) \n",
    "    \n",
    "    # display\n",
    "    print(\"\\n\\n\")\n",
    "    pd.set_option('display.max_colwidth', None)\n",
    "    display( dataframe) \n",
    "else:\n",
    "    print(\"Empty Response\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Oil-Fired Power Plant Type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can measure the impact of an oil-fired power plant on the environment. In this example, the oil-fired power plant uses crude oil as fuel and the energy content is 5 GigaJoules.  The output is the measurement of all the Greenhouse Gas Emissions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "fuel_type = \"Crude Oil\"\n",
    "energy_content = \"5\"\n",
    "energy_unit = \"GJ\"  #Giga Joule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requests payload is : {\n",
      "  \"activity\": {\n",
      "    \"type\": \"Crude Oil\",\n",
      "    \"value\": 5,\n",
      "    \"unit\": \"GJ\"\n",
      "  },\n",
      "  \"location\": {\n",
      "    \"country\": \"USA\",\n",
      "    \"stateProvince\": \"New York\"\n",
      "  },\n",
      "  \"time\": {\n",
      "    \"date\": \"2025-01-01\"\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "crude_oil_payload = {\n",
    "  \"activity\": {\n",
    "    \"type\": fuel_type,\n",
    "    \"value\": energy_value,\n",
    "    \"unit\": energy_unit\n",
    "  },\n",
    "  \"location\": {\n",
    "    \"country\": \"USA\",\n",
    "    \"stateProvince\": \"New York\"\n",
    "  },\n",
    "  \"time\": {\n",
    "    \"date\": \"2025-01-01\"\n",
    "  }\n",
    "}\n",
    "       \n",
    "print(\"Requests payload is :\", json.dumps(crude_oil_payload, indent=2))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Submit the request\n",
    "crude_oil_response = requests.post(EAPI_ENDPOINT, \n",
    "                                   headers = request_headers, \n",
    "                                   data = json.dumps(crude_oil_payload))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transactionId</th>\n",
       "      <th>totalCO2e</th>\n",
       "      <th>CO2</th>\n",
       "      <th>CH4</th>\n",
       "      <th>N2O</th>\n",
       "      <th>unit</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1b15eb3b-ff9d-42c8-9b25-9c983c3608ed</td>\n",
       "      <td>354.403039</td>\n",
       "      <td>353.251442</td>\n",
       "      <td>0.398083</td>\n",
       "      <td>0.753515</td>\n",
       "      <td>kgCO2e</td>\n",
       "      <td>The crude oil emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          transactionId   totalCO2e         CO2       CH4  \\\n",
       "0  1b15eb3b-ff9d-42c8-9b25-9c983c3608ed  354.403039  353.251442  0.398083   \n",
       "\n",
       "        N2O    unit  \\\n",
       "0  0.753515  kgCO2e   \n",
       "\n",
       "                                                                                                                              description  \n",
       "0  The crude oil emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if crude_oil_response.text != \"\":\n",
    "    # Get the response as json\n",
    "    response_json = crude_oil_response.json()\n",
    "    \n",
    "    # Get json and convert to dataframe\n",
    "    json_str = json.dumps(response_json)\n",
    "    dict = json.loads(json_str)\n",
    "    dataframe = pd.json_normalize(dict) \n",
    "    \n",
    "    # display\n",
    "    print(\"\\n\\n\")\n",
    "    pd.set_option('display.max_colwidth', None)\n",
    "    display( dataframe) \n",
    "else:\n",
    "    print(\"Empty Response\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Biomass-Fired Power Plant Type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can measure the impact of a biomass-fired power plant on the environment. In this example, the biomass-fired power plant uses wood or wood residuals as the fuel and the energy content is 5 GigaJoules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "fuel_type = \"Biomass - Wood and Wood Residuals\"\n",
    "energy_content = \"5\" \n",
    "energy_unit = \"GJ\"  #Giga Joule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requests payload is : {\n",
      "  \"activity\": {\n",
      "    \"type\": \"Biomass - Wood and Wood Residuals\",\n",
      "    \"value\": 5,\n",
      "    \"unit\": \"GJ\"\n",
      "  },\n",
      "  \"location\": {\n",
      "    \"country\": \"USA\",\n",
      "    \"stateProvince\": \"New York\"\n",
      "  },\n",
      "  \"time\": {\n",
      "    \"date\": \"2025-01-01\"\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "biomass_payload = {\n",
    "  \"activity\": {\n",
    "    \"type\": fuel_type,\n",
    "    \"value\": energy_value,\n",
    "    \"unit\": energy_unit\n",
    "  },\n",
    "  \"location\": {\n",
    "    \"country\": \"USA\",\n",
    "    \"stateProvince\": \"New York\"\n",
    "  },\n",
    "  \"time\": {\n",
    "    \"date\": \"2025-01-01\"\n",
    "  }\n",
    "}\n",
    "       \n",
    "print(\"Requests payload is :\", json.dumps(biomass_payload, indent=2))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Submit the request\n",
    "biomass_response = requests.post(EAPI_ENDPOINT, \n",
    "                                 headers = request_headers, \n",
    "                                 data = json.dumps(biomass_payload))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transactionId</th>\n",
       "      <th>totalCO2e</th>\n",
       "      <th>CO2</th>\n",
       "      <th>CH4</th>\n",
       "      <th>N2O</th>\n",
       "      <th>unit</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8dbe659a-fcf9-4307-993c-f79ad794a454</td>\n",
       "      <td>450.002718</td>\n",
       "      <td>444.526231</td>\n",
       "      <td>0.9554</td>\n",
       "      <td>4.521088</td>\n",
       "      <td>kgCO2e</td>\n",
       "      <td>The biomass - wood and wood residuals emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          transactionId   totalCO2e         CO2     CH4  \\\n",
       "0  8dbe659a-fcf9-4307-993c-f79ad794a454  450.002718  444.526231  0.9554   \n",
       "\n",
       "        N2O    unit  \\\n",
       "0  4.521088  kgCO2e   \n",
       "\n",
       "                                                                                                                                                      description  \n",
       "0  The biomass - wood and wood residuals emissions factor used to calculate this result was obtained from the  year 2025 GHG - EPA factor set for the area Earth.  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if biomass_response.text != \"\":\n",
    "    # Get the response as json\n",
    "    response_json = biomass_response.json()\n",
    "    \n",
    "    # Get json and convert to dataframe\n",
    "    json_str = json.dumps(response_json)\n",
    "    dict = json.loads(json_str)\n",
    "    dataframe = pd.json_normalize(dict) \n",
    "    \n",
    "    # display\n",
    "    print(\"\\n\\n\")\n",
    "    pd.set_option('display.max_colwidth', None)\n",
    "    display( dataframe) \n",
    "else:\n",
    "    print(\"Empty Response\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparison of Emissions Between Power Plant Types"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the carbon emissions measured for each of the power plant types, now we can compare the emission levels and analyze the impact on the environment.\n",
    "For this task, we plot a graph of emissions by the power plant types and analyze the results in the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Data\n",
    "labels = ['Coal-Fired', 'Oil-Fired', 'Natural Gas-Fired', 'Biomass-Fired']\n",
    "co2e = [lignite_response.json()['totalCO2e'], crude_oil_response.json()['totalCO2e'], natural_gas_response.json()['totalCO2e'], biomass_response.json()['totalCO2e']]\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Stacked Bar Chart\n",
    "ax.bar(labels, co2e, label='totalCO2e')\n",
    "\n",
    "ax.set_xlabel('Power Plant Type')\n",
    "ax.set_ylabel('Emissions (metric tonne)')\n",
    "ax.set_title('totalCO2e Emissions by Power Plant Type')\n",
    "ax.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Related Links"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Emissions API Developer Guide]()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
